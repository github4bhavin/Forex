.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Forex 3"
.TH Forex 3 "2012-10-24" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Forex \- Historic Foreign Exchange Rates from Open Exchange Rates
.SH "VERSION"
.IX Header "VERSION"
1.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Forex;
\& 
\& my $oxr = new Forex( \*(AqAPP_ID\*(Aq => $app_id, \*(AqBASE\*(Aq => \*(AqUSD\*(Aq);
\& 
\& #_\|_fetch and initialize daily rates from $from_date to $to_date in yyyy\-mm\-dd 
\& $oxr\->get_rates_from ( $from_date, $to_date );
\&
\& #_\|_\|_ fetches rates for $date (yyyy\-mm\-dd)
\& $oxr\->get_rates( $date );
\&         
\& #_\|_\|_ fetches reates for today 
\& $oxr\->get_rates();
\&        
\& #_\|_\|_ gives AUD on 2012\-09\-01 in USD Base currency
\& $usd = $oxr\->get_rate_of ( \*(AqAUD\*(Aq, \*(Aq2012\-09\-01\*(Aq );  
\& 
\& if ($Forex::OXR::LASTERROR )
\&    { print "\en Something went wrong" , $oxr\->last_error_message(); }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
\fInew \fIForex()\fI\fR
.IX Subsection "new Forex()"
.PP
returns new Forex object with defaults values for 
\&\s-1OXR_HOME\s0 = 'http://openexchangerates.org',
\&\s-1API_HOOK\s0 = 'api',
\&\s-1APP_ID\s0 = 'temp\-e091fc14b3884a516d6cc2c299a',
\&\s-1BASE\s0 = '\s-1USD\s0'
.PP
.Vb 4
\& my $oxe = new Forex::OXR( OXR_HOME => \*(Aqhttps://openexchangerates.org\*(Aq,
\&                                                                        API_HOOK => \*(Aqapi\*(Aq,
\&                                                                        APP_ID   => \*(Aqtemp\-e091fc14b3884a516d6cc2c299a\*(Aq,
\&                                                                        BASE     => \*(AqAUD\*(Aq);
.Ve
.PP
\fIget_rate_of( \f(CI$currency\fI, <$date> )\fR
.IX Subsection "get_rate_of( $currency, <$date> )"
.PP
This method returns forex rate for \f(CW$currency\fR on \f(CW$date\fR in \s-1USD\s0, \f(CW$date\fR should be in \f(CW\*(C`yyyy\-mm\-dd\*(C'\fR format.
This method looks for currency rates in \f(CW$obj\fR\->{ \s-1CURRENCIES\s0 } array.Which is filled by \f(CW\*(C`get_rates\*(C'\fR or \f(CW\*(C`get_rates_from()\*(C'\fR methods
.PP
my \f(CW$AUD\fR = \f(CW$oxr\fR\->get_rate_of( '\s-1AUD\s0' , '2012\-09\-10' );
.PP
\fIget_rates_from ( \f(CI$from_date\fI , \f(CI$to_date\fI )\fR
.IX Subsection "get_rates_from ( $from_date , $to_date )"
.PP
downloads and fills in values for all currencies in the \f(CW$obj\fR\->{\s-1CURRENCIES\s0} hash for \f(CW$from_date\fR \- \f(CW$to_date\fR
both dates should be in \f(CW\*(C`yyyy\-mm\-dd\*(C'\fR formate
.PP
\fIget_rates ( <$day> )\fR
.IX Subsection "get_rates ( <$day> )"
.PP
downloads and fills in values for all currencies in the \f(CW$obj\fR\->{\s-1CURRENCIES\s0} hash for given \f(CW$day\fR
\&\f(CW$day\fR should be in \f(CW\*(C`yyyy\-mm\-dd\*(C'\fR formate
if \f(CW$day\fR is skipped , it uses \f(CW\*(C`todays date\*(C'\fR,
.PP
\fI\fIget_currency_symbols()\fI\fR
.IX Subsection "get_currency_symbols()"
.PP
this method downloads and initializes all currency symbols from openexchangerates site.
this method should be run before either \f(CW\*(C`get_rates\*(C'\fR or \f(CW\*(C`get_rates_from\*(C'\fR
.PP
\fIbase_currency( <$BASE_CURRENCY> )\fR
.IX Subsection "base_currency( <$BASE_CURRENCY> )"
.PP
sets \s-1BASE\s0 currency so that succeeding request will request the rates with base currency as specified by \f(CW$BASE_CURRENCY\fR.
if the parameter is omitted it return the current \s-1BASE_CURRENCY\s0 value;
.PP
Note: you will have to flush the \f(CW$CURRENCIES\fR hash if you change the \s-1BASE\s0 currency. with \f(CW\*(C`flush_values()\*(C'\fR
.PP
\fIoxr_home ( <$OXR_HOME> )\fR
.IX Subsection "oxr_home ( <$OXR_HOME> )"
.PP
sets \s-1OXR_HOME\s0 parameter to \f(CW$OXR_HOME\fR value , if the parameter is omitted it returns the current value of the \s-1OXR_HOME\s0.
\&\s-1OXR_HOME\s0 value should cuntaion \*(L"http://\*(R" .
.PP
Note: you could you it to change the default \*(L"http://\*(R" to \*(L"https://\*(R" if you have enterprise \s-1APP_ID\s0
.PP
\fIapp_id ( <$APP_ID> )\fR
.IX Subsection "app_id ( <$APP_ID> )"
.PP
sets app_id for all succeeding requests. return current app_id if the parameter is omitted.
.PP
\fI\fIget_currencies()\fI\fR
.IX Subsection "get_currencies()"
.PP
returns all the currencies in the currencies hash
.PP
\fI\fIlast_error()\fI\fR
.IX Subsection "last_error()"
.PP
returns last error object as returned by Open Exchange Rates \s-1API\s0
.PP
\fIlast_error_message ()\fR
.IX Subsection "last_error_message ()"
.PP
returns last error message
.PP
\fI\s-1ERROR\s0\fR
.IX Subsection "ERROR"
.PP
on errors module sets \f(CW$LASTERROR\fR global variable which can be accessed by \f(CW$Forex::LASTERROR\fR.
And error message can be accessed via \fIlast_error_message()\fR or \fIlast_error()\fR
.PP
\fI\s-1KNOWN\s0 \s-1BUGS\s0\fR
.IX Subsection "KNOWN BUGS"
.PP
\fI\s-1SUPPORT\s0\fR
.IX Subsection "SUPPORT"
.PP
please submit known issues or bugs to mail4bhavin@yahoo.com
.PP
\fI\s-1AUTHOR\s0\fR
.IX Subsection "AUTHOR"
.PP
Bhavin Patel <mail4bhavin@gmail.com
.PP
\fI\s-1COPYRIGHT\s0 \s-1AND\s0 \s-1LICENSE\s0\fR
.IX Subsection "COPYRIGHT AND LICENSE"
.PP
This Software is free to use , licensed under:
.PP
.Vb 1
\&        The Artistic License 2.0 (GPL Compatible)
.Ve
